>DEVELOPER WEBPAGE ARCHITECTURE

>>PRIORITY OVERVIEW

>>>SYNOPSIS
For developers in particular, there should be another subset of pages that can be used to upload or view process docs, architecture, ideas, scheduling, dev team calendar, etc.

These pages should be adaptable and compactible into a data stream that we can use to create front-facing pages for normal users. This can be in the form of a “pokedex” for items or enemies, or wiki page for a specific system, etc.

>>>SECURITY
-Critically confidential things should stay within the github. 
--As making a perfectly secure page is near impossible, anything that needs to stay critically confidential should stay within the github organization, as github will likely be the safest cloud software that we have access to.
-There should NOT be an “account sign in page”, as the only distinctual difference between accounts would be normal users vs. dev users. 
-Since individual accounts are not needed as personal information does not need to be stored, the dev account should be “toggleable” via an encrypted key stored in a personal machine’s local storage. 
--This encrypted key can be installed via a setup script stored in the github. For more information on this, see “Secure Key Check”.
-All dev info should be received by the browser on an “on request” basis. 
--This means that by default the website does NOT have the dev pages. 
--The website will instead check if the user is a developer, and if they are, only THEN the website will request the database for the respective pages and receive them on the spot. 
-It is important that we do NOT take the approach of loading all the dev pages and then only showing them if they are a developer. 
--This is to ensure that default users cannot hack their way into viewing the pages, as the pages would be loaded into their machine’s storage otherwise. For more information on this, see “Secure Page Generation”.

>>FUNCTIONAL SYSTEMS

>>>DATABASE INTERACTION
All developer pages and info should be stored via FireStore, the Firebase built in database. A good rule of thumb to go by is that the webpage code should be able to be stored in a PUBLIC github repository. When we need a developer page, the website will make a request to FireStore for metadata that contains the developer page. The developer page will then be received and generated on the spot, ensuring that the developer page is never exposed outside of the private FireStore database or outside of a developer’s authorized machine.

>>>PAGE SYSTEM
Developer pages should be generated into front-facing HTML via a custom or preexisting markdown language file (think README.md and how that interfaces with github!). This allows developers to easily upload custom pages and documents easily and for the website to easily interpret that and maintain a sleek and appealing front-facing webpage. The markdown language file will be stored via FireStore (See “Database Interaction”  for more info).





>>>UPLOAD SYSTEM
Developer pages should be able to be uploaded into FireStore via the website. This also allows developers to add new pages and process documents to the website without having to redeploy the website every time, and possibly causing conflicts with other developers. 

>>>SECURE KEY CHECK
To determine if the user is a valid developer, the website will use the LocalStorage functionality of most modern browsers to receive a locally stored encrypted key. The website will then perform several checks to ensure that this key is the same key stored in FireStore. IMPORTANT: it must be ensured that the key is not statically defined or stored in the website. Remember: any user who visits the website is sent all the information from the website’s public folder. Instead, the key should be stored in FireStore and then requested during comparison. This key should then be generated via a script that is stored in a PRIVATE github repository under the github organization. This key should be generated by hashing a defined passcode with a half-key requested from firestore. It is recommended that this defined passcode be some random string of characters, but knowing your ass you’re prolly gonna make it like boobs or some shit.

>>>SECURE PAGE GENERATION
Dev pages should be requested and received from FireStore AFTER confirming that the user is a verified developer. The dev page will be received as the markdown content, and then likely pushed through a javascript module to generate HTML data that can be displayed on the website. Developers should also have an option to read the markdown content, edit it, and update/reupload it so they can edit pages easily once they’re uploaded. It is recommended that when the developer chooses to edit the page, it “locks” the page in the database so no other developers can edit it at the same time. However, until the dev team gets substantial and this becomes a potential issue, it is a lower priority.
